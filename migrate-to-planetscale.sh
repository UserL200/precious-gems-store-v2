#!/bin/bash

# PlanetScale Database Migration Script
# Migrates existing gemsdb to PlanetScale

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${BLUE}🚀 PlanetScale Migration Tool for gemsdb${NC}"
echo ""

# Step 1: Check if mysqldump is available
echo -e "${YELLOW}🔍 Checking system requirements...${NC}"
if ! command -v mysqldump &> /dev/null; then
    echo -e "${RED}❌ mysqldump is not installed. Please install MySQL client tools.${NC}"
    echo "Ubuntu/Debian: sudo apt-get install mysql-client"
    echo "macOS: brew install mysql-client"
    echo "Windows: Download MySQL installer from mysql.com"
    exit 1
fi

if ! command -v mysql &> /dev/null; then
    echo -e "${RED}❌ mysql client is not installed. Please install MySQL client tools.${NC}"
    exit 1
fi

echo -e "${GREEN}✅ MySQL client tools found${NC}"

# Step 2: Get local database credentials
echo -e "${YELLOW}📝 Local Database Connection Details${NC}"
echo "Please provide your local gemsdb connection details:"
echo ""

read -p "Local MySQL Host (default: localhost): " LOCAL_HOST
LOCAL_HOST=${LOCAL_HOST:-localhost}

read -p "Local MySQL Port (default: 3306): " LOCAL_PORT
LOCAL_PORT=${LOCAL_PORT:-3306}

read -p "Local MySQL Username (default: root): " LOCAL_USER
LOCAL_USER=${LOCAL_USER:-root}

read -s -p "Local MySQL Password: " LOCAL_PASSWORD
echo ""

read -p "Local Database Name (default: gemsdb): " LOCAL_DB
LOCAL_DB=${LOCAL_DB:-gemsdb}

# Step 3: Test local connection
echo -e "${YELLOW}🔗 Testing local database connection...${NC}"
if mysql -h"$LOCAL_HOST" -P"$LOCAL_PORT" -u"$LOCAL_USER" -p"$LOCAL_PASSWORD" -e "USE $LOCAL_DB; SELECT 1;" &> /dev/null; then
    echo -e "${GREEN}✅ Local database connection successful${NC}"
else
    echo -e "${RED}❌ Failed to connect to local database. Please check your credentials.${NC}"
    exit 1
fi

# Step 4: Create export directory
EXPORT_DIR="gemsdb_export_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$EXPORT_DIR"
echo -e "${YELLOW}📁 Created export directory: $EXPORT_DIR${NC}"

# Step 5: Export database schema
echo -e "${YELLOW}🗄️ Exporting database schema...${NC}"
mysqldump -h"$LOCAL_HOST" -P"$LOCAL_PORT" -u"$LOCAL_USER" -p"$LOCAL_PASSWORD" \
    --no-data \
    --routines \
    --triggers \
    --single-transaction \
    --lock-tables=false \
    --add-drop-table \
    "$LOCAL_DB" > "$EXPORT_DIR/schema.sql"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Schema exported successfully${NC}"
else
    echo -e "${RED}❌ Failed to export schema${NC}"
    exit 1
fi

# Step 6: Export database data
echo -e "${YELLOW}📊 Exporting database data...${NC}"
mysqldump -h"$LOCAL_HOST" -P"$LOCAL_PORT" -u"$LOCAL_USER" -p"$LOCAL_PASSWORD" \
    --no-create-info \
    --single-transaction \
    --lock-tables=false \
    --extended-insert \
    --disable-keys \
    "$LOCAL_DB" > "$EXPORT_DIR/data.sql"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Data exported successfully${NC}"
else
    echo -e "${RED}❌ Failed to export data${NC}"
    exit 1
fi

# Step 7: Create PlanetScale-compatible schema
echo -e "${YELLOW}🔧 Creating PlanetScale-compatible schema...${NC}"

# Remove MySQL-specific features that PlanetScale doesn't support
cat > "$EXPORT_DIR/planetscale_schema.sql" << 'EOF'
-- PlanetScale-compatible schema for gemsdb
-- Generated by migration script

SET foreign_key_checks = 0;

-- Users table
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    role ENUM('customer', 'admin') DEFAULT 'customer',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Products table
CREATE TABLE IF NOT EXISTS products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    category ENUM('rings', 'necklaces', 'bracelets', 'earrings', 'gemstones') NOT NULL,
    stock INT DEFAULT 0,
    image_url VARCHAR(500),
    featured BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Orders table
CREATE TABLE IF NOT EXISTS orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    total_amount DECIMAL(10, 2) NOT NULL,
    status ENUM('pending', 'processing', 'shipped', 'delivered', 'cancelled') DEFAULT 'pending',
    shipping_address TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_user_id (user_id),
    INDEX idx_status (status)
);

-- Order items table
CREATE TABLE IF NOT EXISTS order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_order_id (order_id),
    INDEX idx_product_id (product_id)
);

-- Categories table (if needed)
CREATE TABLE IF NOT EXISTS categories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Customer addresses table
CREATE TABLE IF NOT EXISTS customer_addresses (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    address_line1 VARCHAR(255) NOT NULL,
    address_line2 VARCHAR(255),
    city VARCHAR(100) NOT NULL,
    state VARCHAR(100),
    postal_code VARCHAR(20),
    country VARCHAR(100) NOT NULL,
    is_default BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_user_id (user_id)
);

-- Product images table
CREATE TABLE IF NOT EXISTS product_images (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    image_url VARCHAR(500) NOT NULL,
    alt_text VARCHAR(255),
    is_primary BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_product_id (product_id)
);

-- Reviews table
CREATE TABLE IF NOT EXISTS reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    user_id INT NOT NULL,
    rating INT NOT NULL CHECK (rating >= 1 AND rating <= 5),
    comment TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_product_id (product_id),
    INDEX idx_user_id (user_id)
);

SET foreign_key_checks = 1;
EOF

# Step 8: Clean up data for PlanetScale
echo -e "${YELLOW}🧹 Cleaning up data for PlanetScale...${NC}"

# Remove foreign key constraints and other incompatible features from data
sed -e 's/FOREIGN KEY.*REFERENCES.*,//g' \
    -e 's/CONSTRAINT.*FOREIGN KEY.*REFERENCES.*,//g' \
    -e 's/CONSTRAINT.*PRIMARY KEY.*,//g' \
    -e '/^\/\*!40000 ALTER TABLE.*ENABLE KEYS/d' \
    -e '/^\/\*!40000 ALTER TABLE.*DISABLE KEYS/d' \
    -e '/^\/\*!40101 SET.*CHARACTER_SET_CLIENT/d' \
    -e '/^\/\*!40101 SET.*CHARACTER_SET_RESULTS/d' \
    -e '/^\/\*!40101 SET.*COLLATION_CONNECTION/d' \
    -e '/^\/\*!40111 SET.*SQL_NOTES/d' \
    -e '/^\/\*!40103 SET.*TIME_ZONE/d' \
    -e '/^\/\*!40014 SET.*UNIQUE_CHECKS/d' \
    -e '/^\/\*!40014 SET.*FOREIGN_KEY_CHECKS/d' \
    -e '/^\/\*!40101 SET.*SQL_MODE/d' \
    -e '/^\/\*!40111 SET.*SQL_NOTES/d' \
    "$EXPORT_DIR/data.sql" > "$EXPORT_DIR/planetscale_data.sql"

# Step 9: Create migration instructions
cat > "$EXPORT_DIR/MIGRATION_INSTRUCTIONS.md" << 'EOF'
# PlanetScale Migration Instructions

## Prerequisites
1. Sign up for PlanetScale account at https://planetscale.com
2. Install PlanetScale CLI: https://planetscale.com/docs/concepts/planetscale-cli

## Step 1: Create PlanetScale Database
```bash
# Login to PlanetScale
pscale auth login

# Create new database
pscale database create precious-gems-store

# Create development branch
pscale branch create precious-gems-store dev
```

## Step 2: Import Schema
```bash
# Connect to your database
pscale shell precious-gems-store dev

# In the PlanetScale shell, run:
source planetscale_schema.sql;
```

## Step 3: Import Data
```bash
# Still in PlanetScale shell:
source planetscale_data.sql;
```

## Step 4: Create Production Branch
```bash
# Exit PlanetScale shell (Ctrl+D)
# Create production branch
pscale branch create precious-gems-store main

# Promote dev to production
pscale deploy-request create precious-gems-store dev
pscale deploy-request deploy precious-gems-store <request-number>
```

## Step 5: Get Connection String
```bash
# Create connection string for production
pscale password create precious-gems-store main production-password

# This will give you a connection string like:
# mysql://username:password@host:port/database
```

## Step 6: Update Vercel Environment Variables
1. Go to https://vercel.com/dashboard
2. Select your project
3. Settings → Environment Variables
4. Add: `DATABASE_URL` with your PlanetScale connection string

## Alternative: Web UI Import
If CLI doesn't work, you can also:
1. Go to your PlanetScale dashboard
2. Select your database
3. Use the "Import" feature
4. Upload the planetscale_schema.sql and planetscale_data.sql files

## Troubleshooting
- If you get foreign key errors, make sure to run schema first, then data
- PlanetScale doesn't support foreign keys, so they're removed from the schema
- Check data types compatibility in the migration
EOF

# Step 10: Create verification script
cat > "$EXPORT_DIR/verify_migration.sql" << 'EOF'
-- Verification queries for PlanetScale migration

-- Check table structure
SHOW TABLES;

-- Check row counts
SELECT 'users' as table_name, COUNT(*) as row_count FROM users
UNION ALL
SELECT 'products' as table_name, COUNT(*) as row_count FROM products  
UNION ALL
SELECT 'orders' as table_name, COUNT(*) as row_count FROM orders
UNION ALL
SELECT 'order_items' as table_name, COUNT(*) as row_count FROM order_items;

-- Check sample data
SELECT * FROM products LIMIT 5;
SELECT * FROM users LIMIT 5;

-- Check for any data issues
SELECT 
    'products_with_null_price' as issue,
    COUNT(*) as count 
FROM products 
WHERE price IS NULL;

SELECT 
    'users_with_invalid_email' as issue,
    COUNT(*) as count 
FROM users 
WHERE email = '' OR email IS NULL;
EOF

# Step 11: Final summary
echo ""
echo -e "${GREEN}🎉 Migration files created successfully!${NC}"
echo ""
echo -e "${BLUE}📁 Export directory: $EXPORT_DIR${NC}"
echo "├── schema.sql (original schema)"
echo "├── data.sql (original data)"
echo "├── planetscale_schema.sql (PlanetScale-compatible schema)"
echo "├── planetscale_data.sql (PlanetScale-compatible data)"
echo "├── MIGRATION_INSTRUCTIONS.md (step-by-step guide)"
echo "└── verify_migration.sql (verification queries)"
echo ""
echo -e "${YELLOW}🚀 Next Steps:${NC}"
echo "1. Follow the instructions in MIGRATION_INSTRUCTIONS.md"
echo "2. Or use the quick PlanetScale setup below"
echo ""
echo -e "${BLUE}⚡ Quick PlanetScale Setup:${NC}"
echo "1. Go to https://planetscale.com and create account"
echo "2. Create new database called 'precious-gems-store'"
echo "3. Import the planetscale_schema.sql file"
echo "4. Import the planetscale_data.sql file"
echo "5. Get your connection string and add to Vercel"
echo ""
echo -e "${GREEN}✅ Your gemsdb is ready for PlanetScale migration!${NC}"

# Step 12: Display local data summary
echo ""
echo -e "${YELLOW}📊 Local Database Summary:${NC}"
mysql -h"$LOCAL_HOST" -P"$LOCAL_PORT" -u"$LOCAL_USER" -p"$LOCAL_PASSWORD" -e "
USE $LOCAL_DB;
SELECT 'Total Tables' as metric, COUNT(*) as value FROM information_schema.tables WHERE table_schema = '$LOCAL_DB'
UNION ALL
SELECT 'Total Rows' as metric, SUM(table_rows) as value FROM information_schema.tables WHERE table_schema = '$LOCAL_DB';
" 2>/dev/null || echo "Could not get database summary"

echo ""
echo -e "${GREEN}🔗 Useful Links:${NC}"
echo "• PlanetScale Docs: https://planetscale.com/docs"
echo "• CLI Installation: https://planetscale.com/docs/concepts/planetscale-cli"
echo "• Import Guide: https://planetscale.com/docs/imports/database-imports"
echo ""