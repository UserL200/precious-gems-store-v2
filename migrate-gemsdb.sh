#!/bin/bash

# Free Database Migration Script for Filess.io
# Migrates existing gemsdb to Filess.io free hosting

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${BLUE}🚀 Free Database Migration Tool for gemsdb → Filess.io${NC}"
echo -e "${BLUE}💎 Optimized for jewelry store database migration${NC}"
echo ""

# Step 1: Check if mysqldump is available
echo -e "${YELLOW}🔍 Checking system requirements...${NC}"
if ! command -v mysqldump &> /dev/null; then
    echo -e "${RED}❌ mysqldump is not installed. Please install MySQL client tools.${NC}"
    echo "Ubuntu/Debian: sudo apt-get install mysql-client"
    echo "macOS: brew install mysql-client"
    echo "Windows: Download MySQL installer from mysql.com"
    exit 1
fi

if ! command -v mysql &> /dev/null; then
    echo -e "${RED}❌ mysql client is not installed. Please install MySQL client tools.${NC}"
    exit 1
fi

echo -e "${GREEN}✅ MySQL client tools found${NC}"

# Step 2: Get local database credentials
echo -e "${YELLOW}📝 Local Database Connection Details${NC}"
echo "Please provide your local gemsdb connection details:"
echo ""

read -p "Local MySQL Host (default: localhost): " LOCAL_HOST
LOCAL_HOST=${LOCAL_HOST:-localhost}

read -p "Local MySQL Port (default: 3306): " LOCAL_PORT
LOCAL_PORT=${LOCAL_PORT:-3306}

read -p "Local MySQL Username (default: root): " LOCAL_USER
LOCAL_USER=${LOCAL_USER:-root}

read -s -p "Local MySQL Password: " LOCAL_PASSWORD
echo ""

read -p "Local Database Name (default: gemsdb): " LOCAL_DB
LOCAL_DB=${LOCAL_DB:-gemsdb}

# Step 3: Test local connection
echo -e "${YELLOW}🔗 Testing local database connection...${NC}"
if mysql -h"$LOCAL_HOST" -P"$LOCAL_PORT" -u"$LOCAL_USER" -p"$LOCAL_PASSWORD" -e "USE $LOCAL_DB; SELECT 1;" &> /dev/null; then
    echo -e "${GREEN}✅ Local database connection successful${NC}"
else
    echo -e "${RED}❌ Failed to connect to local database. Please check your credentials.${NC}"
    exit 1
fi

# Step 4: Create export directory
EXPORT_DIR="filess_export_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$EXPORT_DIR"
echo -e "${YELLOW}📁 Created export directory: $EXPORT_DIR${NC}"

# Step 5: Export database schema
echo -e "${YELLOW}🗄️ Exporting database schema...${NC}"
mysqldump -h"$LOCAL_HOST" -P"$LOCAL_PORT" -u"$LOCAL_USER" -p"$LOCAL_PASSWORD" \
    --no-data \
    --single-transaction \
    --lock-tables=false \
    --add-drop-table \
    --skip-comments \
    --skip-set-charset \
    --skip-extended-insert \
    "$LOCAL_DB" > "$EXPORT_DIR/original_schema.sql"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Original schema exported successfully${NC}"
else
    echo -e "${RED}❌ Failed to export schema${NC}"
    exit 1
fi

# Step 6: Export database data
echo -e "${YELLOW}📊 Exporting database data...${NC}"
mysqldump -h"$LOCAL_HOST" -P"$LOCAL_PORT" -u"$LOCAL_USER" -p"$LOCAL_PASSWORD" \
    --no-create-info \
    --single-transaction \
    --lock-tables=false \
    --skip-comments \
    --skip-set-charset \
    --complete-insert \
    "$LOCAL_DB" > "$EXPORT_DIR/original_data.sql"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Original data exported successfully${NC}"
else
    echo -e "${RED}❌ Failed to export data${NC}"
    exit 1
fi

# Step 7: Create Filess.io-compatible schema
echo -e "${YELLOW}🔧 Creating Filess.io-compatible schema...${NC}"

cat > "$EXPORT_DIR/filess_schema.sql" << 'EOF'
-- Filess.io compatible schema for gemsdb
-- Optimized for free hosting with 100MB limit
-- Generated by Filess.io migration script

SET foreign_key_checks = 0;
SET sql_mode = 'NO_AUTO_VALUE_ON_ZERO';

-- Users table
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    role ENUM('customer', 'admin') DEFAULT 'customer',
    phone VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_email (email),
    INDEX idx_role (role)
);

-- Products table
CREATE TABLE IF NOT EXISTS products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    category ENUM('rings', 'necklaces', 'bracelets', 'earrings', 'gemstones', 'other') NOT NULL,
    stock INT DEFAULT 0,
    image_url VARCHAR(500),
    featured BOOLEAN DEFAULT FALSE,
    weight DECIMAL(8, 2),
    material VARCHAR(100),
    gemstone VARCHAR(100),
    carat DECIMAL(8, 2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_category (category),
    INDEX idx_featured (featured),
    INDEX idx_price (price)
);

-- Orders table
CREATE TABLE IF NOT EXISTS orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    order_number VARCHAR(50) UNIQUE,
    total_amount DECIMAL(10, 2) NOT NULL,
    status ENUM('pending', 'processing', 'shipped', 'delivered', 'cancelled') DEFAULT 'pending',
    payment_status ENUM('pending', 'paid', 'failed', 'refunded') DEFAULT 'pending',
    shipping_address TEXT,
    billing_address TEXT,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_user_id (user_id),
    INDEX idx_status (status),
    INDEX idx_order_number (order_number)
);

-- Order items table
CREATE TABLE IF NOT EXISTS order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    total_price DECIMAL(10, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_order_id (order_id),
    INDEX idx_product_id (product_id)
);

-- Customer addresses table
CREATE TABLE IF NOT EXISTS customer_addresses (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    address_type ENUM('shipping', 'billing') DEFAULT 'shipping',
    address_line1 VARCHAR(255) NOT NULL,
    address_line2 VARCHAR(255),
    city VARCHAR(100) NOT NULL,
    state VARCHAR(100),
    postal_code VARCHAR(20),
    country VARCHAR(100) NOT NULL DEFAULT 'US',
    is_default BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_user_id (user_id),
    INDEX idx_address_type (address_type)
);

-- Product images table
CREATE TABLE IF NOT EXISTS product_images (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    image_url VARCHAR(500) NOT NULL,
    alt_text VARCHAR(255),
    is_primary BOOLEAN DEFAULT FALSE,
    sort_order INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_product_id (product_id),
    INDEX idx_is_primary (is_primary)
);

-- Reviews table
CREATE TABLE IF NOT EXISTS reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    user_id INT NOT NULL,
    rating INT NOT NULL CHECK (rating >= 1 AND rating <= 5),
    title VARCHAR(255),
    comment TEXT,
    verified_purchase BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_product_id (product_id),
    INDEX idx_user_id (user_id),
    INDEX idx_rating (rating)
);

-- Categories table
CREATE TABLE IF NOT EXISTS categories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    description TEXT,
    parent_id INT DEFAULT NULL,
    image_url VARCHAR(500),
    is_active BOOLEAN DEFAULT TRUE,
    sort_order INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_parent_id (parent_id),
    INDEX idx_is_active (is_active)
);

-- Coupons table
CREATE TABLE IF NOT EXISTS coupons (
    id INT AUTO_INCREMENT PRIMARY KEY,
    code VARCHAR(50) NOT NULL UNIQUE,
    discount_type ENUM('percentage', 'fixed') NOT NULL,
    discount_value DECIMAL(10, 2) NOT NULL,
    min_order_amount DECIMAL(10, 2) DEFAULT 0,
    max_uses INT DEFAULT NULL,
    used_count INT DEFAULT 0,
    expires_at TIMESTAMP NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_code (code),
    INDEX idx_is_active (is_active)
);

-- Inventory log table
CREATE TABLE IF NOT EXISTS inventory_log (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    change_type ENUM('stock_in', 'stock_out', 'adjustment') NOT NULL,
    quantity_change INT NOT NULL,
    old_quantity INT NOT NULL,
    new_quantity INT NOT NULL,
    reason VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_product_id (product_id),
    INDEX idx_change_type (change_type)
);

SET foreign_key_checks = 1;
EOF

# Step 8: Clean up data for free hosting
echo -e "${YELLOW}🧹 Cleaning up data for free hosting...${NC}"

# Create a clean version of the data for import
sed -e '/^\/\*!/d' \
    -e '/^--/d' \
    -e '/^$/d' \
    -e 's/`//g' \
    -e '/SET.*foreign_key_checks/d' \
    -e '/SET.*sql_mode/d' \
    -e '/SET.*time_zone/d' \
    -e '/SET.*character_set_client/d' \
    -e '/SET.*character_set_results/d' \
    -e '/SET.*collation_connection/d' \
    -e '/LOCK TABLES/d' \
    -e '/UNLOCK TABLES/d' \
    -e '/AUTO_INCREMENT=/d' \
    "$EXPORT_DIR/original_data.sql" > "$EXPORT_DIR/filess_data.sql"

# Step 9: Create Filess.io setup instructions
cat > "$EXPORT_DIR/FILESS_SETUP_GUIDE.md" << 'EOF'
# 🚀 Complete Filess.io Setup Guide for gemsdb

## Why Filess.io?
- **100% FREE forever** - No credit card required
- **100MB MySQL database** storage
- **Reliable hosting** with good uptime
- **Easy setup** with web interface
- **Perfect for small projects** like jewelry stores

## Step-by-Step Setup

### 1. Create Filess.io Account
1. Go to **https://filess.io**
2. Click "Sign Up" 
3. Create your account (no credit card needed!)
4. Verify your email

### 2. Create MySQL Database
1. Login to your Filess.io dashboard
2. Click "Create Database"
3. Select "MySQL"
4. Choose database name (e.g., `gemsdb_prod`)
5. Set password
6. Click "Create"

### 3. Import Your Database

#### Option A: Using phpMyAdmin (Recommended)
1. In your Filess.io dashboard, click "phpMyAdmin"
2. Login with your database credentials
3. Select your database from the left sidebar
4. Click "Import" tab
5. **First**: Upload `filess_schema.sql` (creates tables)
   - Click "Choose File" → Select `filess_schema.sql`
   - Click "Go" to import
6. **Then**: Upload `filess_data.sql` (imports your data)
   - Click "Choose File" → Select `filess_data.sql`
   - Click "Go" to import

#### Option B: Using SQL Editor
1. In your Filess.io dashboard, click "SQL Editor"
2. Copy and paste contents of `filess_schema.sql`
3. Click "Execute"
4. Copy and paste contents of `filess_data.sql`
5. Click "Execute"

### 4. Get Connection Details
From your Filess.io dashboard, you'll see:
```
Host: your-host.filess.io
Port: 3306
Database: your_database_name
Username: your_username
Password: your_password
```

### 5. Create Connection String
Format your connection string like this:
```
mysql://username:password@host:port/database_name
```

**Example:**
```
mysql://user123:mypassword@db-mysql-fra1-12345.filess.io:3306/gemsdb_prod
```

### 6. Add to Your Project

#### For Vercel Deployment:
1. Go to https://vercel.com/dashboard
2. Select your project
3. Go to Settings → Environment Variables
4. Add new variable:
   - **Name**: `DATABASE_URL`
   - **Value**: Your connection string from step 5
5. Redeploy your project

#### For Local Development:
1. Create/update `.env` file in your project root:
```env
DATABASE_URL=mysql://username:password@host:port/database_name
```

2. Make sure `.env` is in your `.gitignore` file

### 7. Test Connection
Run this test to verify your connection:

```javascript
// test-connection.js
const mysql = require('mysql2/promise');

async function testConnection() {
    try {
        const connection = await mysql.createConnection(process.env.DATABASE_URL);
        const [rows] = await connection.execute('SELECT COUNT(*) as count FROM products');
        console.log('✅ Connection successful!');
        console.log('Products count:', rows[0].count);
        await connection.end();
    } catch (error) {
        console.error('❌ Connection failed:', error.message);
    }
}

testConnection();
```

## 🔧 Database Optimization Tips

### Keep Under 100MB Limit:
- **Optimize images**: Store images on Cloudinary/Vercel Blob, not in database
- **Archive old data**: Move old orders to separate archive tables
- **Use VARCHAR wisely**: Don't use TEXT for short strings
- **Index carefully**: Only index columns you actually query

### Performance Best Practices:
- **Use connection pooling** in your app
- **Implement caching** for frequently accessed data
- **Optimize queries** with proper indexes
- **Monitor database size** regularly

## 🚨 Troubleshooting

### Import Errors:
- **Large data files**: Split data into smaller chunks
- **Character encoding**: Use UTF-8 encoding
- **Timeout issues**: Try importing during off-peak hours
- **SQL syntax errors**: Check for MySQL version compatibility

### Connection Issues:
- **Check credentials**: Verify host, port, username, password
- **Network issues**: Try from different network
- **Database limits**: Ensure you haven't exceeded connection limits

### Common Solutions:
1. **Restart database**: Sometimes helps with connection issues
2. **Check Filess.io status**: Visit their status page
3. **Contact support**: Filess.io offers basic free support
4. **Use IP whitelist**: If available, add your server IPs

## 📊 Database Structure
Your migrated database includes these tables:

- `users` - Customer accounts and admin users
- `products` - Jewelry items with details
- `orders` - Customer orders
- `order_items` - Individual items in orders
- `customer_addresses` - Shipping/billing addresses
- `product_images` - Product photo URLs
- `reviews` - Customer reviews and ratings
- `categories` - Product categories
- `coupons` - Discount codes
- `inventory_log` - Stock tracking

## 🎯 Next Steps

1. **Test your application** with the new database
2. **Update any hardcoded URLs** in your code
3. **Set up automated backups** (export data regularly)
4. **Monitor database usage** to stay under 100MB
5. **Consider upgrading** if you need more storage later

## 📞 Need Help?
- **Filess.io Support**: Check their documentation
- **Community Forums**: Look for MySQL help
- **Database Issues**: Verify your SQL syntax
- **Connection Problems**: Check your environment variables

---

**🎉 Your jewelry store database is now ready on Filess.io!**

Remember to keep your connection string secure and never commit it to version control.
EOF

# Step 10: Create verification script
cat > "$EXPORT_DIR/verify_import.sql" << 'EOF'
-- Verification queries for Filess.io import

-- Check if all tables exist
SHOW TABLES;

-- Check row counts for main tables
SELECT 'users' as table_name, COUNT(*) as row_count FROM users
UNION ALL
SELECT 'products' as table_name, COUNT(*) as row_count FROM products  
UNION ALL
SELECT 'orders' as table_name, COUNT(*) as row_count FROM orders
UNION ALL
SELECT 'order_items' as table_name, COUNT(*) as row_count FROM order_items
UNION ALL
SELECT 'categories' as table_name, COUNT(*) as row_count FROM categories
UNION ALL
SELECT 'reviews' as table_name, COUNT(*) as row_count FROM reviews;

-- Check sample data from key tables
SELECT 'Sample Products' as section;
SELECT id, name, price, category, stock FROM products LIMIT 5;

SELECT 'Sample Users' as section;
SELECT id, email, first_name, last_name, role FROM users LIMIT 5;

SELECT 'Sample Orders' as section;
SELECT id, user_id, total_amount, status, created_at FROM orders LIMIT 5;

-- Check for potential data issues
SELECT 'Data Quality Check' as section;

SELECT 
    'products_with_null_price' as issue,
    COUNT(*) as count 
FROM products 
WHERE price IS NULL OR price = 0;

SELECT 
    'users_with_invalid_email' as issue,
    COUNT(*) as count 
FROM users 
WHERE email = '' OR email IS NULL OR email NOT LIKE '%@%';

SELECT 
    'orders_with_zero_total' as issue,
    COUNT(*) as count 
FROM orders 
WHERE total_amount IS NULL OR total_amount = 0;

-- Check database size (approximate)
SELECT 
    table_name,
    ROUND(((data_length + index_length) / 1024 / 1024), 2) AS size_mb
FROM information_schema.tables 
WHERE table_schema = DATABASE()
ORDER BY size_mb DESC;
EOF

# Step 11: Create a simple backup script
cat > "$EXPORT_DIR/backup_script.sh" << 'EOF'
#!/bin/bash
# Quick backup script for your Filess.io database

# Get current date for filename
DATE=$(date +%Y%m%d_%H%M%S)

echo "Creating backup of Filess.io database..."

# You'll need to replace these with your actual Filess.io credentials
# HOST="your-host.filess.io"
# PORT="3306"
# USER="your_username"
# PASS="your_password"
# DB="your_database_name"

# Uncomment and update the line below with your credentials
# mysqldump -h"$HOST" -P"$PORT" -u"$USER" -p"$PASS" "$DB" > "backup_$DATE.sql"

echo "Instructions:"
echo "1. Update the credentials in this script"
echo "2. Run: ./backup_script.sh"
echo "3. Store backups securely"
echo "4. Test restore process regularly"
EOF

chmod +x "$EXPORT_DIR/backup_script.sh"

# Step 12: Get database statistics
echo -e "${YELLOW}📊 Analyzing your database for Filess.io...${NC}"

# Calculate approximate database size
DB_SIZE=$(mysql -h"$LOCAL_HOST" -P"$LOCAL_PORT" -u"$LOCAL_USER" -p"$LOCAL_PASSWORD" -e "
SELECT ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS db_size_mb
FROM information_schema.tables 
WHERE table_schema = '$LOCAL_DB';" 2>/dev/null | tail -n 1)

# Get table count
TABLE_COUNT=$(mysql -h"$LOCAL_HOST" -P"$LOCAL_PORT" -u"$LOCAL_USER" -p"$LOCAL_PASSWORD" -e "
SELECT COUNT(*) 
FROM information_schema.tables 
WHERE table_schema = '$LOCAL_DB';" 2>/dev/null | tail -n 1)

# Step 13: Final summary
echo ""
echo -e "${GREEN}🎉 Filess.io migration files created successfully!${NC}"
echo ""
echo -e "${BLUE}📁 Export directory: $EXPORT_DIR${NC}"
echo "├── filess_schema.sql      (Filess.io-compatible schema)"
echo "├── filess_data.sql        (Filess.io-compatible data)"
echo "├── FILESS_SETUP_GUIDE.md  (Complete setup instructions)"
echo "├── verify_import.sql      (Verification queries)"
echo "├── backup_script.sh       (Backup script template)"
echo "├── original_schema.sql    (Original schema backup)"
echo "└── original_data.sql      (Original data backup)"
echo ""

if [ ! -z "$DB_SIZE" ]; then
    echo -e "${YELLOW}📊 Database Analysis:${NC}"
    echo "• Database size: ~${DB_SIZE}MB"
    echo "• Table count: ${TABLE_COUNT}"
    echo "• Filess.io limit: 100MB"
    
    if (( $(echo "$DB_SIZE > 100" | bc -l) )); then
        echo -e "${RED}⚠️  WARNING: Database is larger than 100MB limit!${NC}"
        echo "Consider optimizing data before migration"
    else
        echo -e "${GREEN}✅ Database size is within Filess.io limits${NC}"
    fi
fi

echo ""
echo -e "${BLUE}🚀 Next Steps:${NC}"
echo "1. Go to https://filess.io and create your free account"
echo "2. Create a new MySQL database"
echo "3. Import filess_schema.sql first (creates tables)"
echo "4. Import filess_data.sql second (adds your data)"
echo "5. Get your connection string from Filess.io dashboard"
echo "6. Add DATABASE_URL to your Vercel environment variables"
echo ""
echo -e "${GREEN}✅ Your gemsdb is ready for Filess.io!${NC}"
echo ""
echo -e "${YELLOW}🔗 Helpful Links:${NC}"
echo "• Filess.io: https://filess.io"
echo "• Setup Guide: Check FILESS_SETUP_GUIDE.md in export folder"
echo "• Vercel Dashboard: https://vercel.com/dashboard"
echo ""
echo -e "${GREEN}💎 Happy migrating your jewelry store database!${NC}"